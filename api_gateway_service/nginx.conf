worker_processes auto;

events {
    worker_connections  1024; #до 1024 одновременных соединений
}

http { #дефолтные настройки для HTTP-сервера
    resolver 127.0.0.11; #docker host

    include       mime.types;

    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen  8080;
        server_name  localhost;
        http2 on;

        location / { #grpc
           grpc_pass grpc://auth_service:8082;
       }

       location /auth/{ #grpc-gateway
            proxy_pass http://grpc_gateway:8083/auth/;
       }

       location /credits/ { #rest
       # Проверка токена доступа перед отправкой запроса к credit_service
            access_by_lua_block {
                            local http = require "resty.http"

                            local httpc = http.new()

                            local res, err = httpc:request_uri("http://grpc_gateway:8083/auth/validateAccessToken", {
                                method = "POST",
                                headers = {
                                    ["Authorization"] = ngx.var.http_authorization
                                }
                            })

                            if not res then -- no answer from server
                                ngx.header.content_type = "application/json"
                                ngx.log(ngx.ERR, "failed to request validateToken: ", err)
                                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                                ngx.say("Internal Server Error: ", err)
                                ngx.say(res.body)
                                return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                            end

                            if res.status ~= 200 then
                                ngx.header.content_type = "application/json"
                                ngx.log(ngx.ERR, "validateToken failed with status: ", res.status)
                                ngx.status = ngx.HTTP_UNAUTHORIZED
                                ngx.say(res.body)
                                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                            end;
                        }

           proxy_pass http://credit_service:8081/credits/;
       }
    }
}
